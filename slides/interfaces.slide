Interfaces
Mastering Go Workshop

A S L Devi & Anand Chitipothu
Pipal Academy
https:/pipal.in/

* Interfaces

Interfaces are abstract types in Go.

* Example: Stringer

    $ go doc fmt.Stringer
    type Stringer interface {
        String() string
    }

The Stringer interface specifies how to convert a value to a string.
The `fmt` package uses this when printing values.

* Example: Stringer

    type Point struct {
        x, y int
    }

    func (p Point) String() string {
        return fmt.Sprintf("(%s, %s", p.x, p.y)
    }

    func main() {
        p := Point{2, 3}
        fmt.Println(p)
    }

* Exercise: IPAddr

Make IP address print as "a.b.c.d".

    package main

    import "fmt"

    type IPAddr [4]byte

    // Add a "String() string" method to IPAddr.

    func main() {
        hosts := map[string]IPAddr{
            "localhost":  {127, 0, 0, 1},
            "googleDNS": {8, 8, 8, 8},
        }
        for name, ip := range hosts {
            fmt.Printf("%v: %v\n", name, ip)
        }
        fmt.Println(hosts)
    }

* Reader

    $ go doc io.Reader
    type Reader interface {
        Read(p []byte) (n int, err error)
    }
        Reader is the interface that wraps the basic Read method.

        Read reads up to len(p) bytes into p. It returns the number of bytes read (0
        <= n <= len(p)) and any error encountered.
        ...
        Implementations must not retain p.

* Exercise: UppercaseWriter

Implement a module `uppercase` that implements a function `NewWriter` takes a reader as argument and gives its contents in upper case.

    r := uppercase.NewWriter(os.Stdout)
    fmt.Println("Concurrency is not parallelism.")

What would be the path to import `uppercase`?

* Exercise: github module

Convert the program that prints repositories of a github organization into a package. Try to model the APIs using interfaces.

* The Empty Interface

    interface{}

Display any value:

    func display(value interface{}) {
        fmt.Printf("%T %v\n", value, value)
    }

* Type assertions

    func whatis(value interface()) {
        if v, ok := value.(string); ok {
            fmt.Println("%v is a string", value)
        } else if v, ok := value.(int); ok {
            fmt.Println("%v is an integer", value)
        }
        } else {
            fmt.Println("%v is of unknown type", value)
        }
    }

* Type Switches

    func whatis(value interface()) {
        switch v := i.(type) {
        case string:
            fmt.Println("%v is a string", value)
        case int:
            fmt.Println("%v is an integer", value)
        default:
           fmt.Println("%v is of unknown type", value)
        }
    }
