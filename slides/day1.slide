Mastering Go
June 19-21, 2019

A S L Devi & Anand Chitipothu
Pipal Academy
https://pipal.in/
@pipalacademy


* Getting started

* Brief History of Go

* A Taste of Go

* Hello world!

.play ../programs/helloworld.go

* Running

    $ go build helloworld.go
    $ ./helloworld

or

    $ go run helloworld.go

* Variables

.play ../programs/variables.go

- Each variable declared and each package imported should be used for the program to compile.
- Go prefers mixed caps for multi word names like `someVar` than with underscores like `some_var`
- Every declared variable is initialized to its zero value.

* Zero values

.play ../programs/zero_values.go

* Constants

.play ../programs/constants.go

- Constants can only be numbers, characters, strings or booleans.
- They are created at compile time, even when defined as locals in functions.

* Problems
- Check which of the following expressions can be declared as constants.

    (a) 1<<10
    (b) math.Sin(math.Pi/4)
    (c) 365*24*60*60

* Assignments
    Right hand side is evaluated and the vaules are assigned to the left hand side.

.play ../programs/assignments.go

* Functions

Functions make it possible to break a big job into smaller pieces that might well be written by different people separated by both time and space. They make code more readable, hence reusable.

    func name(parameter-list) (result-list) {
        body
    }

-

    func incr(m int) (int) {
        return m+1
    }

- Every function call must provide an argument for each parameter, in the same order of declaration.
- Go has no concept of default parameter values, nor any way to specify arguments by name.


* Problems

- Write a function `add` that takes 2 integers as parameters and returns their sum.
- Write a function `swap` that takes 2 strings as parameters and returns them in swapped order.
- Write a function `hypot` to return hypotenuse of a triangle, given its two sides. (hint: Use `math.Sqrt`)

* Named return values

    func incr(m int) (n int) {
        n = m + 1
        return
    }


* Control Structures

* if

    if cond {
        ...
    }
-

    if cond {
        ...
    } else {
        ...
    }

-

    func abs(n int) int {
        if n >= 0 {
            return n
        }
        return -n
    }

* Problems

- Write a function `isOdd` to return a bool indicating if the integer argument is odd.
- Write a function `min` to return minimum of 2 integers.
- Write a function `min3` to return minimum of 3 integers.


* Short if

    if v := someFunctionCall(); conditionOn(v) {
        ...
    }

-

    func limitedPow(x, n, limit float64) float64 {
        if v := math.Pow(x, n); v < limit {
            return v
        }
        return limit
    }


* for

    for init; condition; post {
        ...
    }

    for condition {
        ...
    }

    for {
        ...
    }


    sum := 0
    for i := 0; i < 10; i++ {
        sum += i
    }

`break`, `continue` work as in other programming languages.

We'll see iterating over arrays, slices and maps with `for` when we introduce those types.


* Problems

- Write a function `isPrime` to check if a given integer is a prime.
- Write a function `gcd` to return greatest common divisor of given 2 integers.


* switch

* Using standard library

.code ../programs/sum.go

Documentation of <pkg> can be seen by `$ go doc <pkg>` and is available at https://golang.org/pkg/<pkg>


* Problems
- Write a program `echo` which prints out the command line arguments.

    $ go run echo.go this is a line
    this is a line

- Extend `echo` program to take an optional separator

    $ go run echo.go -s , this is a line
    this,is,a,line

    $ go run echo.go -s / a bc def
    a/bc/def

* Naive Solution
.play ../programs/echo_naive.go

* Solution using std lib
.play ../programs/echo.go

Session 2: Basic & Composite Types

* Integers, floating-point numbers & booleans

: bit operators, power, % etc

* Strings, bytes and runes

* Problems

- Write a function `reverse` to return its argument string reversed rune-wise.
- Write a function that joins a slice of strings with a separator.
    func strjoin(sep string, strs []string)


* Arrays and slices


* Problems

- Write a function `compare` that returns an integer comparing the two byte slices, lexicographically.
The result will be 0 if a == b, -1 if a < b, and 1 if a > b

* Maps
* Struct
* Type declarations
* JSON and templates


* Session 3: Functions

* Function declarations

* Multiple return values

* Functions are first class in Go

Functions can be assigned to variables, passed as arguments to other functions and returned from other functions

.code ../programs/func_as_param.go

.code ../programs/func_as_var.go

* Problems

- Write a function `filter` to take a function `f` and slice `a` as parameters that returns slice with elements `e` for which f(e) is true


* Handling errors

* Deferred function calls

A `defer` statement defers the execution of a function until the surrounding function returns.

The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.

.play ../programs/defer.go

* Variadic functions

A variadic function is one that can be called with varying numbers of arguments.

`fmt.Println` is a good example of a one.

.play ../programs/variadic_sum.go

- Write a function `sum` that takes variable number of float32 numbers and returns their sum.
- Write a function `strjoin` that takes a separator as first argument followed by variable number of strings to join with that separator.


* Panic and recover


Session 4: Packages
- The package declaration - Imports, `init` function
Package main is special. It defines a standalone executable program, not a library.

- Naming conventions
- The import path
- Documenting packages
