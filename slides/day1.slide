Mastering Go
June 19-21, 2019

A S L Devi & Anand Chitipothu
Pipal Academy
https://pipal.in/
@pipalacademy


* Getting started

* Brief History of Go

* A Taste of Go

* Hello world!

.play -numbers ../programs/helloworld.go

* Running Go programs

    $ go build helloworld.go
    $ ./helloworld

or

    $ go run helloworld.go

* Variables

.play -numbers ../programs/variables.go

* More variables
- Each variable declared and each package imported should be used for the program to compile.
- Go prefers mixed caps for multi word names like `someVar` than with underscores like `some_var`
- Every declared variable is initialized to its zero value.

*Problem*

- Find zero values of `string`, `bool`, `int` and `float32` types.

* Constants

.play -numbers ../programs/constants.go

- Constants can only be numbers, characters, strings or booleans.
- They are created at compile time, even when defined as locals in functions.

* Problems
- Check which of the following expressions can be declared as constants.

    (a) 1<<10
    (b) math.Sin(math.Pi/4)
    (c) 365*24*60*60

* Assignments
    Right hand side is evaluated and the vaules are assigned to the left hand side.

.play -numbers ../programs/assignments.go

* Functions

Functions break a big job into smaller pieces that might be written by different people separated by both time and space. They make code more readable and reusable.

    func name(parameter-list) (result-list) {
        body
    }

-

    func incr(m int) (int) {
        return m+1
    }

    func main(){
        fmt.Println(incr(2))
    }

- Every function call must provide an argument for each parameter, in the same order of declaration.
- Go has no concept of default parameter values, nor any way to specify arguments by name.


* Problems

- Write a function `add` that takes 2 integers as parameters and returns their sum.
- Write a function `swap` that takes 2 strings as parameters and returns them in swapped order.
- Write a function `hypot` to return hypotenuse of a triangle, given its two sides. (hint: Use `math.Sqrt`)

* Named return values

    func incr(m int) (n int) {
        n = m + 1
        return
    }

: There's a lot more to do with functions in Go, we'll come back to them soon.

* Control Structures

* if

    if cond {
        ...
    }
-

    if cond1 {
        ...
    } else if cond2 {
        ...
    } else {
        ...
    }

-

    func abs(n int) int {
        if n >= 0 {
            return n
        }
        return -n
    }

* Problems

- Write a function `isOdd` to return a bool indicating if the integer argument is odd.
- Write a function `min` to return minimum of 2 integers.
- Write a function `min3` to return minimum of 3 integers.


* Short if
- Lets us do variable initialization followed by condition on it.
- The variable would be accessible only in the `if...else` block.

    if v := someFunctionCall(); conditionOn(v) {
        ...
    }

-

    func cappedPow(x, n, limit float64) float64 {
        if v := math.Pow(x, n); v < limit {
            return v
        }
        return limit
    }


* for

    for init; condition; post {
        ...
    }

    for condition { // while
        ...
    }

    for {   // forever
        ...
    }


    sum := 0
    for i := 0; i < 10; i++ {
        sum += i
    }

`break`, `continue` work same as in other programming languages.

We'll see iterating over arrays, slices and maps with `for` when we introduce those types.


* Problems

- Write a function `isPrime` to check if a given integer is a prime.
- Write a function `gcd` to return greatest common divisor of given 2 integers.


* switch

    Used for multi-way branch. Though one can achieve the same with `if...else if`, it's more idiomatic in Go.

    switch (optional-init; ) v {
    case cond1:
        ...
    case cond2:
        ...
    default:
        ...
    }

Only the matched case is run, not all the ones that follow.


* Example

.play -numbers ../programs/switch.go


* Using standard library

Documentation of go package <pkg> is available at `$ go doc <pkg>`. Details of a variable/function can be seen by `$go doc <pkg>.<funcName>`


- Write a program `echo` which prints out the command line arguments. Hint: Use `os` package.

    $ go run echo.go this is a line
    this is a line

- Write a program to print out sum of the integers passed as command line arguments. Hint: Use `strconv` package.
    $ go run sum.go  1 2 3 4
    10
    $ go run sum.go
    0

: .code ../programs/sum.go

- Extend `echo` program to take an optional separator. Hint: Use `flag` package.

    $ go run echo.go -s , this is a line
    this,is,a,line

    $ go run echo.go -s / a bc def
    a/bc/def

:* Naive Solution
:.play -numbers ../programs/echo_naive.go

:* Solution using std lib
:.play -numbers ../programs/echo.go

* Session 2: Basic & Composite Types

* Basic Types

Go's basic types are
    bool

    string

    int  int8  int16  int32  int64
    uint uint8 uint16 uint32 uint64 uintptr

    byte // alias for uint8

    rune // alias for int32
         // represents a Unicode code point

    float32 float64

    complex64 complex128


* Integers, Floats and booleans

    var f float32 = 1 << 24
    fmt.Println(f == f+1)   // true

    var i uint = 1 << 24
    fmt.Println(i == i+1)   // false

    var f float64 = 1 << 24
    fmt.Println(f == f+1)   // false


- Find `uint n` for which `float64(1 << n) == float64(1<<n + 1)`

Boolean
- Write a function `itob` to convert given int to a boolean.
    itob(0)     // false
    itob(-1)    // true


* Strings, bytes and runes

A string is an immutable sequence of bytes.

    s := "hello, world"
    fmt.Println(len(s))
    fmt.Println(s[0], s[7]) // "104 119"  ('h' and 'w')
    fmt.Printf("%v %v", s[0], s[7]) // h w

`s[i:j]` gives us substring of `s` with chars from index `i`, upto `j` (not including `j`th).

    fmt.Println(s[0:5]) //  "hello"
    fmt.Println(s[:5])  //  "hello"
    fmt.Println(s[7:])  //  "world"
    fmt.Println(s[:])   //  "hello, world"

* Problems

- Write a function `reverse` to return its argument string reversed rune-wise.
    func reverse(a string)string
- Write a function that joins a slice of strings with a separator.
    func strjoin(strs []string, sep string)
- Write a function `index` returns the first index of the target string t in , or -1 if no match is found.
    func index(strs []string, t string) int


* Arrays

The type [n]T is an array of n values of type T.

    var a [10]int
    abcd := [4]string{"ant", "bee", "cat", "dog"} // "{}", not []

- Arrays can't be resized.
- Each element of the array is initialized to zero value of type T, by default.

*Iterating over array*

    for index, value := range a {
        fmt.Println(index, value)
    }

    for index := range a {
        fmt.Println(iindex)
    }

* Arrays contd ..

.play -numbers ../programs/arrays.go

- Check if we can call `changeFirst` with a variable of type `[5]int` as first arg.

* Slices

.play -numbers ../programs/slices_intro.go

* Slices contd..

    `s[i:j]` gives us subslice of `s` with elements from index `i`, upto `j` (not including `j`th).
.play -numbers ../programs/slices_indices.go

* Slices contd..

- A slice does not store any data, it just describes a section of an underlying array.
- Changing the elements of a slice modifies the corresponding elements of its underlying array.
- Other slices that share the same underlying array will see those changes.

* Slices contd..

.play -numbers ../programs/slices_pass_to_func.go

* Slices contd..

.play -numbers ../programs/slices_nil_empty.go


* Problems

- Write a function `avg` which takes a slice of float32s and returns their average.
See if you can call it with a float32 array as parameter.
- Write a function `compare` that returns an integer comparing the two byte slices, lexicographically.
The result will be 0 if a == b, -1 if a < b, and 1 if a > b

* Maps
* Struct
* Type declarations
* JSON and templates


* Session 3: Functions

* Multiple return values

* Functions are first class in Go

Functions can be assigned to variables, passed as arguments to other functions and returned from other functions.

    func square(n int) int {
        return n*n
    }
    f = square

    fmt.Println(f(4) == square(4)) //true


- Write a function `adder` so that
    add2 := adder(2)
    add100 := adder(100)
    fmt.Println(add2(1), add100(1))
would print 3, 101 respectively.

:* Solution
:.code ../programs/func_as_var.go


- Write a function `mapper` returns a new slice containing the results of applying the function `f` to each string in the original slice.
    fmt.Println(mapper(strings.ToUpper, []string{"one", "two", "three"})
    ["ONE", "TWO", "THREE"]

: .code ../programs/func_as_param.go

- Write a function `filter` that returns a new slice containing all strings in the slice that satisfy the predicate `f`.
    fmt.Println(mapper(strings.HasPrefix("o"), []string{"one", "two", "three"})
    ["one"]

- Write a function `all` that returns `true` if all of the strings in the slice satisfy the predicate `f`.
    fmt.Println(all(strings.HasSuffix("o"), []string{"one", "two", "three"})
    false

* Handling errors

* Deferred function calls

Go's defer statement schedules a function call (the deferred function) to be run immediately before the function executing the defer returns.

- The deferred call's arguments are evaluated immediately.
- It's very effective way to release resources regardless of which path a function takes to return.
- Canonical examples include closing files, db connections and unlocking a mutex.
- When a function returns, its deferred calls are executed in last-in-first-out order.

    func readContents(filename string) (string, error) {
        f, err := os.Open(filename)
        if err != nil {
            return "", err
        }
        defer f.Close()
        // read content from f
        ...
    }

* What would be output of
.play -numbers ../programs/defer.go

* Variadic functions

A variadic function is one that can be called with varying numbers of arguments.

`fmt.Println` is a good example of a one.

.play -numbers ../programs/variadic_sum.go

- Write a function `avg` which takes variable number of float32s and returns their average.
- Write a function `strjoin` that takes a separator as first argument followed by variable number of strings to join with that separator.


* Panic and recover


Session 4: Packages
- The package declaration - Imports, `init` function
Package main is special. It defines a standalone executable program, not a library.

- Naming conventions
- The import path
- Documenting packages
